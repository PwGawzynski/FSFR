import { printToFileAsync } from 'expo-print';
import * as Sharing from 'expo-sharing';
import { generateFieldAccountingPdf } from './pdfGenerators';
import { TableSettings } from '../../FrontendSelfTypes/moduleProps/ComponentsProps';

export const handleGeneratePdf = async <T extends Record<string, any>>(
  columns: Array<TableSettings<T>>,
  rows: Array<T>,
) => {
  const data = await generateFieldAccountingPdf(columns, rows, {
    header: 'Order Accounting',
    headerFooter: 'AutoGenerated by FarmService App',
    documentBottomFooter:
      "This accounting has only information character, they shouldn't be use for real accounting",
    priceSum: rows
      .reduce(
        (previousValue, currentValue) => previousValue + currentValue.price,
        0,
      )
      .toFixed(2),
    priceWTaxSum: rows
      .reduce(
        (previousValue, currentValue) => previousValue + currentValue.priceWTax,
        0,
      )
      .toFixed(2),
  });
  const file = await printToFileAsync({
    html: data,
    base64: false,
  });
  /* const fileUri = `${FileSystem.documentDirectory}text.pdf`;
  await FileSystem.writeAsStringAsync(fileUri, '<p>elo</p>', {
    encoding: FileSystem.EncodingType.UTF8,
  }); */
  await Sharing.shareAsync(file.uri, { UTI: 'pdffile1' });
};
